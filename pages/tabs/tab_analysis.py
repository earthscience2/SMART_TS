#!/usr/bin/env python3
"""Î∂ÑÏÑù ÎèÑÍµ¨ ÌÉ≠ Î™®Îìà"""

import os
import glob
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from datetime import datetime
import dash
from dash import (
    html, dcc, Input, Output, State,
    dash_table, callback
)
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
from scipy.interpolate import griddata
import ast
import json
from urllib.parse import parse_qs, urlparse

from .utils import parse_material_info_from_inp

def create_analysis_tab_layout():
    """Î∂ÑÏÑù ÎèÑÍµ¨ ÌÉ≠ Î†àÏù¥ÏïÑÏõÉÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§."""
    return html.Div([
        # Î∂ÑÏÑù Ïª®Ìä∏Î°§ ÏÑπÏÖò
        html.Div([
            html.H6("üîß Î∂ÑÏÑù ÏÑ§Ï†ï", style={
                "fontWeight": "600",
                "color": "#374151",
                "marginBottom": "16px",
                "fontSize": "14px"
            }),
            dbc.Row([
                dbc.Col([
                    dbc.Label("Î∂ÑÏÑù ÌïÑÎìú", style={"fontWeight": "500", "color": "#374151"}),
                    dcc.Dropdown(
                        id="analysis-field-dropdown",
                        options=[
                            {"label": "Ïò®ÎèÑ", "value": "temperature"},
                            {"label": "ÏùëÎ†•", "value": "stress"},
                            {"label": "Î≥ÄÌòï", "value": "strain"}
                        ],
                        value="temperature",
                        style={"borderRadius": "6px", "border": "1px solid #d1d5db"}
                    )
                ], md=4),
                dbc.Col([
                    dbc.Label("ÏÉâÏÉÅ ÌåîÎ†àÌä∏", style={"fontWeight": "500", "color": "#374151"}),
                    dcc.Dropdown(
                        id="analysis-preset-dropdown",
                        options=[
                            {"label": "Î¨¥ÏßÄÍ∞ú", "value": "rainbow"},
                            {"label": "ÌååÎûÄÏÉâ", "value": "blues"},
                            {"label": "Îπ®Í∞ÑÏÉâ", "value": "reds"},
                            {"label": "ÎÖπÏÉâ", "value": "greens"}
                        ],
                        value="rainbow",
                        style={"borderRadius": "6px", "border": "1px solid #d1d5db"}
                    )
                ], md=4),
                dbc.Col([
                    dbc.Label("ÏãúÍ∞Ñ", style={"fontWeight": "500", "color": "#374151"}),
                    dcc.Slider(
                        id="analysis-time-slider",
                        min=0,
                        max=5,
                        step=1,
                        value=0,
                        marks={},
                        tooltip={"placement": "bottom", "always_visible": True},
                    )
                ], md=4),
            ])
        ], style={
            "padding": "16px 20px",
            "backgroundColor": "#f9fafb",
            "borderRadius": "8px",
            "border": "1px solid #e5e7eb",
            "marginBottom": "16px"
        }),
        
        # Ïä¨ÎùºÏù¥Ïä§ Ïª®Ìä∏Î°§ ÏÑπÏÖò
        html.Div([
            html.H6("‚úÇÔ∏è Ïä¨ÎùºÏù¥Ïä§ ÏÑ§Ï†ï", style={
                "fontWeight": "600",
                "color": "#374151",
                "marginBottom": "16px",
                "fontSize": "14px"
            }),
            dbc.Row([
                dbc.Col([
                    dbc.Checklist(
                        id="slice-enable",
                        options=[{"label": "Ïä¨ÎùºÏù¥Ïä§ ÌôúÏÑ±Ìôî", "value": "enabled"}],
                        value=[],
                        style={"marginBottom": "12px"}
                    )
                ], md=3),
                dbc.Col([
                    dbc.Label("Ïä¨ÎùºÏù¥Ïä§ Ï∂ï", style={"fontWeight": "500", "color": "#374151"}),
                    dcc.Dropdown(
                        id="slice-axis",
                        options=[
                            {"label": "XÏ∂ï", "value": "X"},
                            {"label": "YÏ∂ï", "value": "Y"},
                            {"label": "ZÏ∂ï", "value": "Z"}
                        ],
                        value="Z",
                        style={"borderRadius": "6px", "border": "1px solid #d1d5db"}
                    )
                ], md=3),
                dbc.Col([
                    dbc.Label("Ïä¨ÎùºÏù¥Ïä§ ÏúÑÏπò", style={"fontWeight": "500", "color": "#374151"}),
                    dcc.Slider(
                        id="slice-slider",
                        min=0,
                        max=1,
                        step=0.01,
                        value=0.5,
                        marks={},
                        tooltip={"placement": "bottom", "always_visible": True},
                    )
                ], md=6),
            ])
        ], style={
            "padding": "16px 20px",
            "backgroundColor": "#f9fafb",
            "borderRadius": "8px",
            "border": "1px solid #e5e7eb",
            "marginBottom": "16px"
        }),
        
        # ÌòÑÏû¨ ÌååÏùº Ï†ïÎ≥¥
        html.Div([
            html.H6("üìÑ ÌòÑÏû¨ ÌååÏùº", style={
                "fontWeight": "600",
                "color": "#374151",
                "marginBottom": "8px"
            }),
            html.Div(
                id="analysis-current-file-label",
                style={
                    "color": "#6b7280",
                    "fontSize": "14px"
                }
            )
        ], style={
            "padding": "16px 20px",
            "backgroundColor": "#f8fafc",
            "borderRadius": "8px",
            "border": "1px solid #e2e8f0",
            "marginBottom": "16px"
        }),
        
        # 3D Î∂ÑÏÑù Î∑∞Ïñ¥
        html.Div([
            html.Div(
                id="analysis-3d-viewer",
                style={
                    "height": "600px",
                    "borderRadius": "8px",
                    "border": "1px solid #e5e7eb",
                    "backgroundColor": "white"
                }
            )
        ], style={
            "backgroundColor": "white",
            "borderRadius": "8px",
            "padding": "16px"
        }),
    ])

# ÏΩúÎ∞± Ìï®ÏàòÎì§
@callback(
    Output("analysis-3d-viewer", "children"),
    Output("analysis-current-file-label", "children"),
    Output("slice-slider", "min"),
    Output("slice-slider", "max"),
    Input("analysis-field-dropdown", "value"),
    Input("analysis-preset-dropdown", "value"),
    Input("analysis-time-slider", "value"),
    Input("slice-enable", "value"),
    Input("slice-axis", "value"),
    Input("slice-slider", "value"),
    State("tbl-concrete", "selected_rows"),
    State("tbl-concrete", "data"),
    prevent_initial_call=False,
)
def update_analysis_3d_view(field_name, preset, time_idx, slice_enable, slice_axis, slice_slider, selected_rows, tbl_data):
    """Î∂ÑÏÑù 3D Î∑∞Î•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§."""
    if not selected_rows or not tbl_data:
        return html.Div([
            html.H4("Î∂ÑÏÑù Î∑∞Ïñ¥", style={"textAlign": "center", "color": "#6b7280"}),
            html.P("ÏΩòÌÅ¨Î¶¨Ìä∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", style={"textAlign": "center", "color": "#9ca3af"})
        ]), "ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", 0, 1
    
    try:
        row = pd.DataFrame(tbl_data).iloc[selected_rows[0]]
        concrete_pk = row["concrete_pk"]
        concrete_name = row["name"]
        
        # INP ÌååÏùºÎì§ Î°úÎìú
        inp_dir = f"inp/{concrete_pk}"
        inp_files = sorted(glob.glob(f"{inp_dir}/*.inp"))
        
        if not inp_files:
            return html.Div([
                html.H4("Î∂ÑÏÑù Î∑∞Ïñ¥", style={"textAlign": "center", "color": "#6b7280"}),
                html.P("Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§", style={"textAlign": "center", "color": "#9ca3af"})
            ]), "Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå", 0, 1
        
        # ÌòÑÏû¨ ÏãúÍ∞ÑÏóê Ìï¥ÎãπÌïòÎäî ÌååÏùº ÏÑ†ÌÉù
        file_idx = min(time_idx if time_idx is not None else len(inp_files)-1, len(inp_files)-1)
        current_file = inp_files[file_idx]
        
        # ÌååÏùºÎ™ÖÏóêÏÑú ÏãúÍ∞Ñ Ï†ïÎ≥¥ Ï∂îÏ∂ú
        time_str = os.path.basename(current_file).split(".")[0]
        try:
            dt = datetime.strptime(time_str, "%Y%m%d%H")
            formatted_time = dt.strftime("%YÎÖÑ %mÏõî %dÏùº %HÏãú")
        except:
            formatted_time = time_str
        
        # ÌååÏùº ÎÇ¥Ïö© ÏùΩÍ∏∞
        with open(current_file, 'r') as f:
            lines = f.readlines()
        
        # Î¨ºÏÑ±Ïπò Ï†ïÎ≥¥ Ï∂îÏ∂ú
        material_info = parse_material_info_from_inp(lines)
        
        # 3D Î∑∞Ïñ¥ ÏÉùÏÑ± (Í∞ÑÎã®Ìïú ÏòàÏãú)
        fig = go.Figure()
        
        # Ïò®ÎèÑ Îç∞Ïù¥ÌÑ∞ ÌååÏã±
        temp_section = False
        temps = []
        for line in lines:
            if line.startswith('*TEMPERATURE'):
                temp_section = True
                continue
            elif line.startswith('*'):
                temp_section = False
                continue
            if temp_section and ',' in line:
                parts = line.strip().split(',')
                if len(parts) >= 2:
                    try:
                        temp = float(parts[1])
                        temps.append(temp)
                    except:
                        continue
        
        if temps:
            # Í∞ÑÎã®Ìïú 3D ÏÇ∞Ï†êÎèÑ ÏÉùÏÑ±
            x_coords = np.random.uniform(0, 10, len(temps))
            y_coords = np.random.uniform(0, 10, len(temps))
            z_coords = np.random.uniform(0, 5, len(temps))
            
            fig.add_trace(go.Scatter3d(
                x=x_coords,
                y=y_coords,
                z=z_coords,
                mode='markers',
                marker=dict(
                    size=6,
                    color=temps,
                    colorscale=preset,
                    opacity=0.8,
                    colorbar=dict(title=f"{field_name} Í∞í")
                ),
                text=[f"Ïò®ÎèÑ: {t:.1f}¬∞C" for t in temps],
                hovertemplate='%{text}<extra></extra>'
            ))
        
        fig.update_layout(
            scene=dict(
                xaxis=dict(title="X"),
                yaxis=dict(title="Y"),
                zaxis=dict(title="Z"),
            ),
            title=f"{concrete_name} - {field_name} Î∂ÑÏÑù ({formatted_time})",
            showlegend=False
        )
        
        # Ïä¨ÎùºÏù¥Ïä§ Ï†ïÎ≥¥
        slice_info = ""
        if slice_enable and "enabled" in slice_enable:
            slice_info = f" | Ïä¨ÎùºÏù¥Ïä§: {slice_axis}Ï∂ï {slice_slider:.2f}"
        
        current_file_info = f"{formatted_time} | {material_info}{slice_info}"
        
        return dcc.Graph(
            figure=fig,
            style={"height": "100%"},
            config={
                'displayModeBar': True,
                'displaylogo': False,
                'modeBarButtonsToRemove': ['pan2d', 'lasso2d', 'select2d'],
                'toImageButtonOptions': {
                    'format': 'png',
                    'filename': f'analysis_{field_name}',
                    'height': 600,
                    'width': 800,
                    'scale': 2
                }
            }
        ), current_file_info, 0, 1
        
    except Exception as e:
        print(f"Î∂ÑÏÑù Î∑∞Ïñ¥ Ïò§Î•ò: {e}")
        return html.Div([
            html.H4("Î∂ÑÏÑù Î∑∞Ïñ¥", style={"textAlign": "center", "color": "#6b7280"}),
            html.P("Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ïò§Î•ò", style={"textAlign": "center", "color": "#9ca3af"})
        ]), "Ïò§Î•ò Î∞úÏÉù", 0, 1

@callback(
    Output("slice-slider", "style"),
    Input("slice-enable", "value"),
    prevent_initial_call=True,
)
def toggle_slice_detail_controls(slice_enable):
    """Ïä¨ÎùºÏù¥Ïä§ ÏÉÅÏÑ∏ Ïª®Ìä∏Î°§ÏùÑ ÌÜ†Í∏ÄÌï©ÎãàÎã§."""
    if slice_enable and "enabled" in slice_enable:
        return {"display": "block"}
    else:
        return {"display": "none"}

def create_analysis_tab_content(selected_rows, tbl_data):
    """Î∂ÑÏÑù ÎèÑÍµ¨ ÌÉ≠ ÏΩòÌÖêÏ∏†Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§."""
    return html.Div([
        html.H6("üîß Î∂ÑÏÑù ÎèÑÍµ¨", style={
            "fontWeight": "600",
            "color": "#374151",
            "marginBottom": "16px",
            "fontSize": "16px"
        }),
        html.Div([
            html.I(className="fas fa-info-circle fa-2x", style={"color": "#64748b", "marginBottom": "16px"}),
            html.H5("Î∂ÑÏÑù ÎèÑÍµ¨ Í∏∞Îä•Ïù¥ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.", style={
                "color": "#475569",
                "fontWeight": "500",
                "lineHeight": "1.6",
                "margin": "0"
            })
        ], style={
            "textAlign": "center",
            "padding": "60px 40px",
            "backgroundColor": "#f8fafc",
            "borderRadius": "12px",
            "border": "1px solid #e2e8f0",
            "marginTop": "60px"
        })
    ]) 